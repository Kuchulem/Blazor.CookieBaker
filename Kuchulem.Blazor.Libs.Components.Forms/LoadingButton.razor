@using LoadingButtonComponent

<button type=@Type class="@Css loading-button" disabled=@disabled style="border-color:@ButtonBordersColor">
    <span class="loading-button-text">
        @ChildContent
    </span>
    <svg class="loading-button-icon-failure"
         viewBox="0 0 200 200">
        <path d="M 20 20 L 180 180" stroke="@Colors.FailureIcon" />
        <path d="M 180 20 L 20 180" stroke="@Colors.FailureIcon" />
    </svg>
    <svg class="loading-button-icon-success"
         viewBox="0 0 200 200"
         style="enable-background:new 0 0 200 200;"
         xml:space="preserve" xmlns="http://www.w3.org/2000/svg"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         x="0px"
         y="0px">
    <g class="success-group-1"
       transform="translate(13.3,95)">
    <rect class="success-rect-1"
          style="fill:@Colors.SuccessIcon;"
          x="0"
          y="0"
          width="6"
          height="0"
          rx="3"
          transform="rotate(-25.4)">
            </rect>
            </g>
    <g class="success-group-2"
       transform="translate(100,180)">
    <rect class="success-rect-2"
          style="fill:@Colors.SuccessIcon;"
          x="0"
          y="0"
          width="6"
          height="0"
          rx="3"
          transform="rotate(-150)">
            </rect>
        </g>
    </svg>
    <svg class="loading-button-icon-working"
         style="enable-background:new 0 0 400 400;"
         xml:space="preserve" xmlns="http://www.w3.org/2000/svg"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         viewBox="0 0 400 400">
    <g class="working-group-1">
    <path class="working-path-1"
          stroke-width="15"
          stroke="@Colors.WorkingIcon"
          fill="none"
          shape-rendering="geometricPrecision"
          d=" M 380 200 A 180 180 0 1 1 200 20" />
        </g>
    <g class="working-group-2">
    <path class="working-path-2"
          stroke-width="15"
          stroke="@Colors.WorkingIcon"
          fill="none"
          shape-rendering="geometricPrecision"
          d=" M 380 200 A 180 180 0 0 1 20 200" />
        </g>
    </svg>
</button>

@code {
    [Parameter]
    public string Css
    {
        get
        {
            var cssClasses = new[] { css, stateCss }.Where(s => !string.IsNullOrEmpty(s)).ToList();
            return string.Join(" ", cssClasses);
        }
        set => css = value;
    }

    [Parameter]
    public ColorScheme ColorScheme { get; set; }

    [Parameter]
    public string Type { get; set; }

    [Parameter]
    public WorkingState State
    {
        get => state;
        set
        {
            state = value;
        }
    }

    [Parameter]
    public RenderFragment ChildContent
    {
        get => InitialContent;
        set => InitialContent = value;
    }

    private bool disabled => state switch
    {
        WorkingState.Success => true,
        WorkingState.Working => true,
        _ => false
    };
    private RenderFragment InitialContent;
    private WorkingState state;
    private string css;
    private string stateCss => State switch
    {
        WorkingState.Failure => "loading-button--feedback loading-button--failure",
        WorkingState.Success => "loading-button--feedback loading-button--success",
        WorkingState.Working => "loading-button--feedback loading-button--working",
        _ => ""
    };
    private ColorScheme Colors
    {
        get => ColorScheme ??= ColorScheme.Default;
    }
    private string ButtonBordersColor => State switch
    {
        WorkingState.Failure => Colors.FailureBorders ?? Colors.ButtonBorders,
        WorkingState.Success => Colors.SuccessBorders ?? Colors.ButtonBorders,
        WorkingState.Working => Colors.WorkingBorders ?? Colors.ButtonBorders,
        _ => Colors.ButtonBorders
    };
}
